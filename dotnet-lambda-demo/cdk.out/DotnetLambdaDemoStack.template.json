{
  "Resources": {
    "demoS3A195AEAA": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "serverless-inventory-app-s3-bucket"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "DotnetLambdaDemoStack/demoS3/Resource"
      }
    },
    "demoS3Notifications84D70408": {
      "Type": "Custom::S3BucketNotifications",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "demoS3A195AEAA"
        },
        "NotificationConfiguration": {
          "LambdaFunctionConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*"
              ],
              "LambdaFunctionArn": {
                "Fn::GetAtt": [
                  "demoFuncS3DADFBA78",
                  "Arn"
                ]
              }
            }
          ]
        }
      },
      "DependsOn": [
        "demoFuncS3AllowBucketNotificationsFromDotnetLambdaDemoStackdemoS3A9E873A4DDA94112"
      ],
      "Metadata": {
        "aws:cdk:path": "DotnetLambdaDemoStack/demoS3/Notifications/Resource"
      }
    },
    "demoFuncS3ServiceRoleEE68F489": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "DotnetLambdaDemoStack/demoFuncS3/ServiceRole/Resource"
      }
    },
    "demoFuncS3DADFBA78": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters2e14c666ed16b2234e900a842f1a5903f212bbb0b79529060c223a966b1076bbS3Bucket71121D33"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters2e14c666ed16b2234e900a842f1a5903f212bbb0b79529060c223a966b1076bbS3VersionKeyF0007CDD"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters2e14c666ed16b2234e900a842f1a5903f212bbb0b79529060c223a966b1076bbS3VersionKeyF0007CDD"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "func_WithCDK::func_WithCDK.Function::FunctionHandler",
        "Role": {
          "Fn::GetAtt": [
            "demoFuncS3ServiceRoleEE68F489",
            "Arn"
          ]
        },
        "Runtime": "dotnetcore3.1",
        "FunctionName": "serverless-inventory-app-s3-func"
      },
      "DependsOn": [
        "demoFuncS3ServiceRoleEE68F489"
      ],
      "Metadata": {
        "aws:cdk:path": "DotnetLambdaDemoStack/demoFuncS3/Resource",
        "aws:asset:path": "asset.2e14c666ed16b2234e900a842f1a5903f212bbb0b79529060c223a966b1076bb",
        "aws:asset:property": "Code"
      }
    },
    "demoFuncS3AllowBucketNotificationsFromDotnetLambdaDemoStackdemoS3A9E873A4DDA94112": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "demoFuncS3DADFBA78",
            "Arn"
          ]
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        },
        "SourceArn": {
          "Fn::GetAtt": [
            "demoS3A195AEAA",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "DotnetLambdaDemoStack/demoFuncS3/AllowBucketNotificationsFromDotnetLambdaDemoStackdemoS3A9E873A4"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "DotnetLambdaDemoStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": [
          {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "DotnetLambdaDemoStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
        "Code": {
          "ZipFile": "exports.handler = (event, context) => {\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, import/no-extraneous-dependencies\n    const s3 = new (require('aws-sdk').S3)();\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const https = require('https');\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const url = require('url');\n    log(JSON.stringify(event, undefined, 2));\n    const props = event.ResourceProperties;\n    if (event.RequestType === 'Delete') {\n        props.NotificationConfiguration = {}; // this is how you clean out notifications\n    }\n    const req = {\n        Bucket: props.BucketName,\n        NotificationConfiguration: props.NotificationConfiguration,\n    };\n    return s3.putBucketNotificationConfiguration(req, (err, data) => {\n        log({ err, data });\n        if (err) {\n            return submitResponse('FAILED', err.message + `\\nMore information in CloudWatch Log Stream: ${context.logStreamName}`);\n        }\n        else {\n            return submitResponse('SUCCESS');\n        }\n    });\n    function log(obj) {\n        console.error(event.RequestId, event.StackId, event.LogicalResourceId, obj);\n    }\n    // tslint:disable-next-line:max-line-length\n    // adapted from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-cfnresponsemodule\n    // to allow sending an error messge as a reason.\n    function submitResponse(responseStatus, reason) {\n        const responseBody = JSON.stringify({\n            Status: responseStatus,\n            Reason: reason || 'See the details in CloudWatch Log Stream: ' + context.logStreamName,\n            PhysicalResourceId: event.PhysicalResourceId || event.LogicalResourceId,\n            StackId: event.StackId,\n            RequestId: event.RequestId,\n            LogicalResourceId: event.LogicalResourceId,\n            NoEcho: false,\n        });\n        log({ responseBody });\n        const parsedUrl = url.parse(event.ResponseURL);\n        const options = {\n            hostname: parsedUrl.hostname,\n            port: 443,\n            path: parsedUrl.path,\n            method: 'PUT',\n            headers: {\n                'content-type': '',\n                'content-length': responseBody.length,\n            },\n        };\n        const request = https.request(options, (r) => {\n            log({ statusCode: r.statusCode, statusMessage: r.statusMessage });\n            context.done();\n        });\n        request.on('error', (error) => {\n            log({ sendError: error });\n            context.done();\n        });\n        request.write(responseBody);\n        request.end();\n    }\n};"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 300
      },
      "DependsOn": [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
      ],
      "Metadata": {
        "aws:cdk:path": "DotnetLambdaDemoStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
      }
    }
  },
  "Parameters": {
    "AssetParameters2e14c666ed16b2234e900a842f1a5903f212bbb0b79529060c223a966b1076bbS3Bucket71121D33": {
      "Type": "String",
      "Description": "S3 bucket for asset \"2e14c666ed16b2234e900a842f1a5903f212bbb0b79529060c223a966b1076bb\""
    },
    "AssetParameters2e14c666ed16b2234e900a842f1a5903f212bbb0b79529060c223a966b1076bbS3VersionKeyF0007CDD": {
      "Type": "String",
      "Description": "S3 key for asset version \"2e14c666ed16b2234e900a842f1a5903f212bbb0b79529060c223a966b1076bb\""
    },
    "AssetParameters2e14c666ed16b2234e900a842f1a5903f212bbb0b79529060c223a966b1076bbArtifactHashD0A04BC9": {
      "Type": "String",
      "Description": "Artifact hash for asset \"2e14c666ed16b2234e900a842f1a5903f212bbb0b79529060c223a966b1076bb\""
    }
  }
}